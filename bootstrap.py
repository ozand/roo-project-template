# /path/to/your/roo-project-template/bootstrap.py
import subprocess
import sys
import shutil
import tempfile
import argparse
import os
from pathlib import Path

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TEMPLATE_DIRS_TO_COPY = [".roo", "scripts"]
MIGRATION_SOURCE_DIRS = ["docs/memory-bank", "docs/memory-bank/user_story"]

def run_command(command, cwd):
    print(f"\n> –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")
    result = subprocess.run(command, cwd=cwd, capture_output=True, text=True, shell=True)
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{result.stderr or result.stdout}")
        return False
    print(result.stdout)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ.")
    return True

def copy_template_files(template_path: Path, project_path: Path):
    print("\n--- –≠—Ç–∞–ø 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞ ---")
    for dir_name in TEMPLATE_DIRS_TO_COPY:
        source_dir = template_path / dir_name
        target_dir = project_path / dir_name
        if not source_dir.is_dir():
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞ '{dir_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            continue
        if target_dir.exists():
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{dir_name}'...")
            shutil.rmtree(target_dir)
        try:
            shutil.copytree(source_dir, target_dir)
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{dir_name}' —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ '{dir_name}': {e}")

def migrate_existing_docs(project_path: Path):
    print("\n--- –≠—Ç–∞–ø 2: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ pages/ ---")
    target_pages_dir = project_path / "pages"
    target_pages_dir.mkdir(exist_ok=True)
    migrated_count = 0
    for source_rel_path in MIGRATION_SOURCE_DIRS:
        source_dir = project_path / source_rel_path
        if not source_dir.is_dir():
            print(f"‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é: {source_rel_path}")
            continue
        print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ '{source_rel_path}'...")
        for file_path in source_dir.glob("*.md"):
            target_file_path = target_pages_dir / file_path.name
            if target_file_path.exists():
                print(f"  - ‚ö†Ô∏è  –§–∞–π–ª '{file_path.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ pages/. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            else:
                try:
                    shutil.move(str(file_path), str(target_file_path))
                    print(f"  - ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª: {file_path.name}")
                    migrated_count += 1
                except Exception as e:
                    print(f"  - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ '{file_path.name}': {e}")
    print(f"\n–í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {migrated_count}")

def create_symlinks_in_pages(project_path: Path):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –í pages/ –ò–ó .roo/ –¥–ª—è –ø—Ä–∞–≤–∏–ª –∏ –∫–æ–º–∞–Ω–¥.
    """
    print("\n--- –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ pages/ ---")
    
    pages_dir = project_path / "pages"
    pages_dir.mkdir(exist_ok=True)
    
    source_dirs = {
        "rules": project_path / ".roo" / "rules",
        "commands": project_path / ".roo" / "commands"
    }

    for link_type, source_dir in source_dirs.items():
        if not source_dir.is_dir():
            print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è-–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é: {source_dir}")
            continue
        
        for source_file in source_dir.glob("*.md"):
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è —Å—Å—ã–ª–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è.
            # –ù–∞–ø—Ä–∏–º–µ—Ä, "01-quality_guideline.md" -> "rules.01-quality_guideline.md"
            link_name = f"{link_type}.{source_file.stem.replace('_', '-')}.md"
            link_path = pages_dir / link_name

            if link_path.exists() or link_path.is_symlink():
                link_path.unlink()

            try:
                os.symlink(str(source_file.resolve()), str(link_path.resolve()))
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: '{link_path}' -> '{source_file}'")
            except OSError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è '{source_file.name}': {e}")
                print("‚ÑπÔ∏è  –í Windows –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            except Exception as e:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è '{source_file.name}': {e}")

def main():
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ RooCode.")
    parser.add_argument("--migrate", action='store_true', help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
    parser.add_argument("--repo", type=str, default="https://github.com/ozand/roo-project-template.git", help="URL Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º.")
    args = parser.parse_args()
    project_root = Path.cwd()

    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ {args.repo}...")
        if not run_command(["git", "clone", args.repo, "."], cwd=temp_dir):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π-—à–∞–±–ª–æ–Ω. –ü—Ä–µ—Ä—ã–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            return

        template_path = Path(temp_dir)
        copy_template_files(template_path, project_root)
        if args.migrate:
            migrate_existing_docs(project_root)

    create_symlinks_in_pages(project_root)

    print("\nüéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("‚û°Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å `uv run python scripts/development/generate_logseq_config.py` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞.")

if __name__ == "__main__":
    main()