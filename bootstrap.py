# /path/to/your/roo-project-template/bootstrap.py
import subprocess
import sys
import shutil
import tempfile
import argparse
import os
from pathlib import Path

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
TEMPLATE_DIRS_TO_COPY = [".roo", "scripts", "pages"]
# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
MIGRATION_SOURCE_DIRS = ["docs/memory-bank", "docs/memory-bank/user_story"]

def run_command(command, cwd):
    print(f"\n> –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")
    result = subprocess.run(command, cwd=cwd, capture_output=True, text=True, shell=True)
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{result.stderr or result.stdout}")
        return False
    print(result.stdout)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ.")
    return True

def copy_template_files(template_path: Path, project_path: Path):
    print("\n--- –≠—Ç–∞–ø 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞ ---")
    for dir_name in TEMPLATE_DIRS_TO_COPY:
        source_dir = template_path / dir_name
        target_dir = project_path / dir_name
        if not source_dir.is_dir():
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞ '{dir_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            continue
        if target_dir.exists() and dir_name != "pages": # –ù–µ —É–¥–∞–ª—è–µ–º pages, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{dir_name}'...")
            shutil.rmtree(target_dir)
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∞ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º –ø–∞–ø–∫—É, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å pages
            shutil.copytree(source_dir, target_dir, dirs_exist_ok=True)
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{dir_name}' —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ '{dir_name}': {e}")

def migrate_existing_docs(project_path: Path):
    print("\n--- –≠—Ç–∞–ø 2: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ pages/ ---")
    target_pages_dir = project_path / "pages"
    target_pages_dir.mkdir(exist_ok=True)
    migrated_count = 0
    for source_rel_path in MIGRATION_SOURCE_DIRS:
        source_dir = project_path / source_rel_path
        if not source_dir.is_dir():
            print(f"‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é: {source_rel_path}")
            continue
        print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ '{source_rel_path}'...")
        for file_path in source_dir.glob("*.md"):
            target_file_path = target_pages_dir / file_path.name
            if target_file_path.exists():
                print(f"  - ‚ö†Ô∏è  –§–∞–π–ª '{file_path.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ pages/. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            else:
                try:
                    shutil.move(str(file_path), str(target_file_path))
                    print(f"  - ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª: {file_path.name}")
                    migrated_count += 1
                except Exception as e:
                    print(f"  - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ '{file_path.name}': {e}")
    print(f"\n–í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {migrated_count}")

def create_symlinks(project_path: Path):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ pages/ –≤ .roo/ –¥–ª—è –ø—Ä–∞–≤–∏–ª –∏ –∫–æ–º–∞–Ω–¥.
    """
    print("\n--- –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª –∏ –∫–æ–º–∞–Ω–¥ ---")
    
    pages_dir = project_path / "pages"
    link_map = {
        "rules": project_path / ".roo" / "rules",
        "commands": project_path / ".roo" / "commands"
    }

    # 1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ü–µ–ª–µ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    for target_dir in link_map.values():
        target_dir.mkdir(parents=True, exist_ok=True)
        print(f"‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{target_dir}' –≥–æ—Ç–æ–≤–∞.")

    # 2. –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –≤ pages/ –∏ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –Ω–∏—Ö —Å—Å—ã–ª–∫–∏
    files_to_link = list(pages_dir.glob("rules.*.md")) + list(pages_dir.glob("commands.*.md"))
    
    if not files_to_link:
        print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ pages/.")
        return

    for source_file in files_to_link:
        parts = source_file.name.split('.', 2) # e.g., ['rules', 'quality-guideline', 'md']
        if len(parts) < 3:
            continue
            
        link_type = parts[0]  # 'rules' or 'commands'
        link_name = parts[1] + ".md" # 'quality-guideline.md'
        
        target_dir = link_map.get(link_type)
        if not target_dir:
            continue
            
        link_path = target_dir / link_name

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É/—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if link_path.exists() or link_path.is_symlink():
            link_path.unlink()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
        try:
            # –î–ª—è Windows –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è administrator privileges (target_is_directory=False)
            # os.symlink() –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ Path –æ–±—ä–µ–∫—Ç—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Python
            os.symlink(str(source_file.resolve()), str(link_path.resolve()))
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: '{link_path}' -> '{source_file}'")
        except OSError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è '{source_file.name}': {e}")
            print("‚ÑπÔ∏è  –í Windows –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è '{source_file.name}': {e}")

def main():
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ RooCode.")
    parser.add_argument("--migrate", action='store_true', help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
    parser.add_argument("--repo", type=str, default="https://github.com/ozand/roo-project-template.git", help="URL Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º.")
    args = parser.parse_args()

    project_root = Path.cwd()

    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ {args.repo}...")
        if not run_command(["git", "clone", args.repo, "."], cwd=temp_dir):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π-—à–∞–±–ª–æ–Ω. –ü—Ä–µ—Ä—ã–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            return

        template_path = Path(temp_dir)
        copy_template_files(template_path, project_root)

        if args.migrate:
            migrate_existing_docs(project_root)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
    create_symlinks(project_root)

    print("\nüéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("‚û°Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å `uv run python scripts/development/generate_logseq_config.py` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞.")

if __name__ == "__main__":
    main()