# /path/to/your/roo-project-template/bootstrap_project.py
import subprocess
import sys
from pathlib import Path

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –û–∂–∏–¥–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ GitHub
EXPECTED_DIRS = [".roo/rules", "scripts/development"]

def run_command(command, cwd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"\n> –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")
    result = subprocess.run(command, cwd=cwd, capture_output=True, text=True, shell=True)
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(result.stdout)
        print(result.stderr)
        sys.exit(1)
    print(result.stdout)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ.")
    return result

def bootstrap_project():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –ü–û–°–õ–ï –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ GitHub.
    """
    project_root = Path.cwd()
    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤: {project_root}\n")

    # --- –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ ---
    print("--- –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ---")
    all_ok = True
    for dir_path in EXPECTED_DIRS:
        if not (project_root / dir_path).is_dir():
            print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{dir_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞.")
            all_ok = False
    if not all_ok:
        sys.exit(1)
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")

    # --- –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Python-–æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ uv ---
    print("\n--- –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Python –∏ uv ---")
    run_command(["uv", "init", "--quiet"], cwd=project_root)
    run_command(["uv", "venv"], cwd=project_root)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # run_command(["uv", "pip", "install", "pytest"], cwd=project_root)
    
    # --- –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª ---
    print("\n--- –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è Logseq ---")
    # –î–ª—è Windows –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PowerShell
    if sys.platform == "win32":
        ps_script_path = project_root / "scripts" / "development" / "create_logseq_links.ps1"
        if ps_script_path.exists():
             run_command(["powershell", "-ExecutionPolicy", "Bypass", "-File", str(ps_script_path)], cwd=project_root)
        else:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–ª–∏–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –î–ª—è Linux/macOS –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å python
    else:
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ python-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è symlink
        pass

    # --- –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è config.edn –¥–ª—è Logseq ---
    print("\n--- –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è config.edn –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≥—Ä–∞—Ñ–∞ ---")
    config_script = project_root / "scripts" / "development" / "generate_logseq_config.py"
    if config_script.exists():
        run_command(["uv", "run", "python", str(config_script)], cwd=project_root)
    else:
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ config.edn –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    print("\nüéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--init', action='store_true', help='Run full project initialization.')
    args = parser.parse_args()

    if args.init:
        bootstrap_project()
    else:
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --init –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")