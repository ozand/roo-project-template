# /path/to/your/roo-project-template/migrate_project_to_standard.py
import shutil
from pathlib import Path
import argparse

def migrate_project(project_root: Path, template_root: Path):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –Ω–æ–≤–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    1. –ö–æ–ø–∏—Ä—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–ø—Ä–∞–≤–∏–ª–∞, —Å–∫—Ä–∏–ø—Ç—ã) –∏–∑ —à–∞–±–ª–æ–Ω–∞.
    2. –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –ø–∞–ø–∫—É pages/.
    """
    print(f"–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω –∏–∑: {template_root}\n")

    # --- –®–∞–≥ 1: –ë—É—Ç—Å—Ç—Ä–∞–ø–ø–∏–Ω–≥ - –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
    print("--- –≠—Ç–∞–ø 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª ---")
    
    dirs_to_copy = [".roo", "scripts"]
    for dir_name in dirs_to_copy:
        source_dir = template_root / dir_name
        target_dir = project_root / dir_name

        if not source_dir.is_dir():
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞ '{dir_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            continue
        
        if target_dir.exists():
            print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{dir_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ. –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        else:
            try:
                shutil.copytree(source_dir, target_dir)
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{dir_name}' —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ '{dir_name}': {e}")

    # --- –®–∞–≥ 2: –ú–∏–≥—Ä–∞—Ü–∏—è - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ---
    print("\n--- –≠—Ç–∞–ø 2: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ pages/ ---")
    
    target_pages_dir = project_root / "pages"
    target_pages_dir.mkdir(exist_ok=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫–∏, –æ—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
    migration_sources = [
        project_root / "docs" / "memory-bank",
        project_root / "docs" / "memory-bank" / "user_story"
    ]
    
    migrated_files_count = 0
    for source_dir in migration_sources:
        if not source_dir.is_dir():
            print(f"‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é: {source_dir.relative_to(project_root)}")
            continue
        
        print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ '{source_dir.relative_to(project_root)}'...")
        for file_path in source_dir.glob("*.md"):
            target_file_path = target_pages_dir / file_path.name
            
            if target_file_path.exists():
                print(f"  - ‚ö†Ô∏è  –§–∞–π–ª '{file_path.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ pages/. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            else:
                try:
                    shutil.move(str(file_path), str(target_file_path))
                    print(f"  - ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª: {file_path.name}")
                    migrated_files_count += 1
                except Exception as e:
                    print(f"  - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ '{file_path.name}': {e}")

    print(f"\n–í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {migrated_files_count}")
    
    # --- –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ---
    print("\n--- –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ Logseq ---")
    dirs_to_create = ["journals", "assets", "logseq"]
    for dir_name in dirs_to_create:
        (project_root / dir_name).mkdir(exist_ok=True)
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")

    print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("‚û°Ô∏è  –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ `uv run python scripts/development/generate_logseq_config.py` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∞.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É Logseq KB.")
    parser.add_argument(
        "--template-path",
        type=Path,
        required=True,
        help="–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é roo-project-template."
    )
    
    args = parser.parse_args()
    
    current_project_path = Path.cwd()
    template_path = args.template_path.resolve()

    if not template_path.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {template_path}")
        sys.exit(1)

    migrate_project(current_project_path, template_path)