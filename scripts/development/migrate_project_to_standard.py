# /path/to/your/roo-project-template/update_project_from_template.py
import subprocess
import sys
import shutil
import tempfile
import argparse
from pathlib import Path

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ
PROTECTED_FILES = {
    ".git",
    ".gitignore",
    ".env",
    "pyproject.toml",
    "uv.lock",
    "README.md", # –û–±—ã—á–Ω–æ README –ø—Ä–æ–µ–∫—Ç–∞ —É–Ω–∏–∫–∞–ª–µ–Ω
    "pages",     # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞–Ω–∏—è
    "journals",
    "assets",
    "logseq",
}

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –±—É–¥–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞
DIRECTORIES_TO_COPY = [
    ".roo",
    "scripts",
]

def run_command(command, cwd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"\n> –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(command)}")
    result = subprocess.run(command, cwd=cwd, capture_output=True, text=True, shell=True)
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(result.stdout)
        print(result.stderr)
        return False
    print(result.stdout)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ.")
    return True

def copy_template_files(template_path: Path, project_path: Path):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç, –∑–∞—â–∏—â–∞—è –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    print("\n--- –≠—Ç–∞–ø 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞ ---")
    
    for dir_name in DIRECTORIES_TO_COPY:
        source_dir = template_path / dir_name
        target_dir = project_path / dir_name

        if not source_dir.is_dir():
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞ '{dir_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            continue

        # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–µ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if target_dir.exists():
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{dir_name}'...")
            shutil.rmtree(target_dir)
        
        try:
            shutil.copytree(source_dir, target_dir)
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{dir_name}' —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ '{dir_name}': {e}")
            
def migrate_existing_project(project_path: Path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω."""
    print("\n--- –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) ---")
    
    migration_script = project_path / "scripts" / "development" / "migrate_project_to_standard.py"
    
    if migration_script.exists():
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏. –ó–∞–ø—É—Å–∫–∞—é...")
        if not run_command(["uv", "run", "python", str(migration_script)], cwd=project_path):
             print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏.")
             # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    else:
        print("‚ÑπÔ∏è  –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")


def main():
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞.")
    parser.add_argument(
        "--template-repo",
        type=str,
        default="https://github.com/ozand/roo-project-template.git",
        help="URL Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º."
    )
    args = parser.parse_args()

    project_root = Path.cwd()

    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ {args.template_repo}...")
        
        clone_result = run_command(
            ["git", "clone", args.template_repo, "."], 
            cwd=temp_dir
        )
        
        if not clone_result:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π-—à–∞–±–ª–æ–Ω. –ü—Ä–µ—Ä—ã–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            return

        template_path = Path(temp_dir)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã, —É–≤–∞–∂–∞—è PROTECTED_FILES
        copy_template_files(template_path, project_root)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        migrate_existing_project(project_root)

    print("\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("‚û°Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å `uv run python scripts/development/generate_logseq_config.py` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞.")


if __name__ == "__main__":
    main()